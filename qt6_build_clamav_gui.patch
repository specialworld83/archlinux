--- highlighter.h	2025-02-14 17:56:41.055688567 +0100
+++ highlighter_new.h	2024-07-23 13:44:06.000000000 +0200
@@ -22,6 +22,7 @@
 #define HIGHLIGHTER_H
 //
 #include <QSyntaxHighlighter>
+#include <QRegularExpression>
 //
 class highlighter : public QSyntaxHighlighter
 {
@@ -34,14 +35,13 @@
 private:
      struct HighlightingRule
      {
-         QRegExp pattern;
+         QRegularExpression pattern;
          QTextCharFormat format;
      };
-
      QVector<HighlightingRule> highlightingRules;
 
-     QRegExp commentStartExpression;
-     QRegExp commentEndExpression;
+     QRegularExpression commentStartExpression;
+     QRegularExpression commentEndExpression;
 
      QTextCharFormat keywordFormat;
      QTextCharFormat classFormat;

--- highlighter.cpp	2025-02-14 17:43:45.978406528 +0100
+++ highlighter_new.cpp	2024-07-23 14:31:57.000000000 +0200
@@ -29,7 +29,7 @@
 
      singleLineCommentFormat.setForeground(Qt::blue);
      singleLineCommentFormat.setBackground(Qt::white);
-     rule.pattern = QRegExp("^Downloading.*|^ClamInotif:|.-> .*|^/.*|^Database updated.*|^ClamAV update process started.*|^---.*|.Testing database:*|.Database Test passed.");
+     rule.pattern = QRegularExpression("^Downloading.*|^ClamInotif:|.-> .*|^/.*|^Database updated.*|^ClamAV update process started.*|^---.*|.Testing database:*|.Database Test passed.");
      singleLineCommentFormat.setFontWeight(QFont::Normal);
      rule.format = singleLineCommentFormat;
      highlightingRules.append(rule);
@@ -37,52 +37,55 @@
      singleLineCommentFormat.setForeground(QColor(0x4f,0x7e,0x8a,0xff));
      singleLineCommentFormat.setBackground(Qt::white);
      singleLineCommentFormat.setFontWeight(QFont::Bold);
-     rule.pattern = QRegExp("^Known viruses:.|^Engine version:.|^Data scanned:.|^Data read:.|^Time:.|^Start Date:.|^End Date:.");
+     rule.pattern = QRegularExpression("^Known viruses:.|^Engine version:.|^Data scanned:.|^Data read:.|^Time:.|^Start Date:.|^End Date:.");
      rule.format = singleLineCommentFormat;
      highlightingRules.append(rule);
 
      singleLineCommentFormat.setForeground(Qt::darkGreen);
      singleLineCommentFormat.setBackground(Qt::white);
      singleLineCommentFormat.setFontWeight(QFont::Normal);
-     rule.pattern = QRegExp("LOCAL:|OLE2:|Phishing:|Heuristic:|Structured:|Local:|Limits:|.enabled|.disabled|.watching .*|^daily.cvd.*|^daily.cld.*|^bytecode.cvd.*|^main.cvd.*|^freshclam deamon.*|. OK|^Scanned directories:.|^Scanned files:.|^Infected files: 0");
+     rule.pattern = QRegularExpression("LOCAL:|OLE2:|Phishing:|Heuristic:|Structured:|Local:|Limits:|.enabled|.disabled|.watching .*|^daily.cvd.*|^daily.cld.*|^bytecode.cvd.*|^main.cvd.*|^freshclam deamon.*|. OK|^Scanned directories:.|^Scanned files:.|^Infected files: 0");
      rule.format = singleLineCommentFormat;
      highlightingRules.append(rule);
 
      singleLineCommentFormat.setForeground(Qt::darkYellow);
      singleLineCommentFormat.setBackground(Qt::white);
      singleLineCommentFormat.setFontWeight(QFont::Normal);
-     rule.pattern = QRegExp(".Pid file removed.|. Started at.*|. Stopped at.*|.Socket file removed.");
+     rule.pattern = QRegularExpression(".Pid file removed.|. Started at.*|. Stopped at.*|.Socket file removed.");
      rule.format = singleLineCommentFormat;
      highlightingRules.append(rule);
 
      singleLineCommentFormat.setForeground(Qt::red);
      singleLineCommentFormat.setBackground(Qt::white);
      singleLineCommentFormat.setFontWeight(QFont::Normal);
-     rule.pattern = QRegExp("^ERROR: ClamCom:|.Empty file|^WARN.*|.FOUND *|.ERROR:.*|.WARNING:.*|^Can't connect to port.*|.Access denied|^Infected files:.|^Total errors:.*");
+     rule.pattern = QRegularExpression("^ERROR: ClamCom:|.Empty file|^WARN.*|.FOUND *|.ERROR:.*|.WARNING:.*|^Can't connect to port.*|.Access denied|^Infected files:.|^Total errors:.*");
      rule.format = singleLineCommentFormat;
      highlightingRules.append(rule);
 
      multiLineCommentFormat.setForeground(Qt::red);
      singleLineCommentFormat.setBackground(Qt::white);
      singleLineCommentFormat.setFontWeight(QFont::Normal);
-     commentStartExpression = QRegExp("START");
-     commentEndExpression = QRegExp("ENDE");
+     commentStartExpression = QRegularExpression("START");
+     commentEndExpression = QRegularExpression("ENDE");
 
 }
 
 void highlighter::highlightBlock(const QString &text)
  {
      foreach (const HighlightingRule &rule, highlightingRules) {
-         QRegExp expression(rule.pattern);
-         int index = expression.indexIn(text);
-         while (index >= 0) {
-             int length = expression.matchedLength();
+         QRegularExpression expression(rule.pattern);
+         QRegularExpressionMatchIterator iterator = expression.globalMatch(text);
+
+         while (iterator.hasNext()) {
+             QRegularExpressionMatch match = iterator.next();
+             int length = match.capturedLength();
+             int index = match.capturedStart();
              setFormat(index, length, rule.format);
-             index = expression.indexIn(text, index + length);
          }
      }
-     
-     setCurrentBlockState(0);
+
+// Es scheint, als w√§re der restliche Block obsolet ....
+/*     setCurrentBlockState(0);
 
      int startIndex = 0;
      if (previousBlockState() != 1) startIndex = commentStartExpression.indexIn(text);
@@ -94,10 +97,9 @@
              setCurrentBlockState(1);
              commentLength = text.length() - startIndex;
          } else {
-             commentLength = endIndex - startIndex
-                             + commentEndExpression.matchedLength();
+             commentLength = endIndex - startIndex + commentEndExpression.matchedLength();
          }
          startIndex = commentStartExpression.indexIn(text, startIndex + commentLength);
-    }
+    }*/
 }
 //
